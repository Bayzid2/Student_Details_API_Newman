{
	"info": {
		"_postman_id": "82c38317-9cf2-41b2-982b-0a26a08558d8",
		"name": "Students_Details",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "40715992"
	},
	"item": [
		{
			"name": "Create Student",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData =pm.response.json()\r",
							"pm.environment.set(\"id\",jsonData.id)\r",
							"\r",
							"var code=pm.response.code\r",
							"console.log(code)\r",
							"switch(code){\r",
							"        case 201:\r",
							"        var jsonData= pm.response.json()\r",
							"         pm.test(\"Successfully Create Student\")\r",
							"\r",
							"        pm.test(\"Verify Response time is less than 500ms\", function () {//Service Level Aggrement = SLA\r",
							"            pm.expect( pm.response.responseTime ).to.be.below( 500 )\r",
							"        });\r",
							"         break;\r",
							"\r",
							"    case 400:\r",
							"        pm.test(\"Bad Request-400\");\r",
							"        break;\r",
							"\r",
							"    case 401:\r",
							"        pm.test(\"Unable to identify employee\");\r",
							"        break;\r",
							"\r",
							"    case 404:\r",
							"        pm.test(\"Not Found-404\");\r",
							"        break;\r",
							"\r",
							"    case 500:\r",
							"        pm.test(\"Internal Server Error -500\");\r",
							"        break;\r",
							"    \r",
							"    case 503:\r",
							"        pm.test(\"Service Unavailable-503\");\r",
							"        break;\r",
							"}"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"var first_name=pm.variables.replaceIn(\"{{$randomFirstName}}\");\r",
							"pm.environment.set(\"first_name\",first_name);\r",
							"console.log(first_name);\r",
							"\r",
							"var middle_name =pm.variables.replaceIn(\"{{$randomFirstName}}\");\r",
							"pm.environment.set(\"middle_name\",middle_name);\r",
							"console.log(middle_name)\r",
							"\r",
							"var last_name = pm.variables.replaceIn(\"{{$randomLastName}}\")\r",
							"pm.environment.set(\"last_name\",last_name);\r",
							"console.log(last_name)\r",
							"\r",
							"// Generate a random year between 1950 and 2003\r",
							"let year = Math.floor(Math.random() * (2003 - 1950 + 1)) + 1950;\r",
							"\r",
							"// Generate a random month between 1 and 12\r",
							"let month = Math.floor(Math.random() * 12) + 1;\r",
							"month = month < 10 ? '0' + month : month; // Add leading 0 if necessary\r",
							"\r",
							"// Generate a random day based on the month and year\r",
							"let day;\r",
							"if (month == 2) {\r",
							"    // If it's February, check if it's a leap year\r",
							"    let isLeapYear = (year % 4 === 0 && year % 100 !== 0) || (year % 400 === 0);\r",
							"    day = Math.floor(Math.random() * (isLeapYear ? 29 : 28)) + 1;\r",
							"} else if ([4, 6, 9, 11].includes(parseInt(month))) {\r",
							"    // For April, June, September, November, limit days to 30\r",
							"    day = Math.floor(Math.random() * 30) + 1;\r",
							"} else {\r",
							"    // For all other months, limit days to 31\r",
							"    day = Math.floor(Math.random() * 31) + 1;\r",
							"}\r",
							"day = day < 10 ? '0' + day : day; // Add leading 0 if necessary\r",
							"\r",
							"// Combine year, month, and day into a date string (YYYY-MM-DD)\r",
							"let dob = `${year}-${month}-${day}`;\r",
							"\r",
							"// Set the DOB as a global or environment variable\r",
							"pm.environment.set(\"date_of_birth\", dob);\r",
							"\r",
							"console.log(\"Generated random DOB:\", dob);\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"first_name\": \"{{first_name}}\",\r\n  \"middle_name\": \"{{middle_name}}\",\r\n  \"last_name\": \"{{last_name}}\",\r\n  \"date_of_birth\": \"{{date_of_birth}}\"\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/api/studentsDetails",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"studentsDetails"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Student",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var code=pm.response.code\r",
							"console.log(code)\r",
							"switch(code){\r",
							"        case 200:\r",
							"        var jsonData= pm.response.json()\r",
							"         pm.test(\"Successfully Get All Data\")\r",
							"\r",
							"        pm.test(\"Verify Response time is less than 10000ms\", function () {//Service Level Aggrement = SLA\r",
							"            pm.expect( pm.response.responseTime ).to.be.below( 1000 )\r",
							"        });\r",
							"         break;\r",
							"\r",
							"    case 400:\r",
							"        pm.test(\"Bad Request-400\");\r",
							"        break;\r",
							"\r",
							"    case 401:\r",
							"        pm.test(\"Unable to identify employee\");\r",
							"        break;\r",
							"\r",
							"    case 404:\r",
							"        pm.test(\"Not Found-404\");\r",
							"        break;\r",
							"\r",
							"    case 500:\r",
							"        pm.test(\"Internal Server Error -500\");\r",
							"        break;\r",
							"    \r",
							"    case 503:\r",
							"        pm.test(\"Service Unavailable-503\");\r",
							"        break;\r",
							"}\r",
							"var jsonData=pm.response.json()\r",
							"console.log(jsonData.length)\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/api/studentsDetails/",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"studentsDetails",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "Update Student",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var code =pm.response.code\r",
							"\r",
							"switch(code){\r",
							"    case 200:\r",
							"        var jsonData=pm.response.json()\r",
							"        pm.test(\"Successfully updated\",function(){\r",
							"         pm.expect(jsonData.msg).to.eql(\"update  data success\")\r",
							"      })\r",
							"       pm.test(\"Verify Response time is less than 10000ms\", function () {//Service Level Aggrement = SLA\r",
							"            pm.expect( pm.response.responseTime ).to.be.below( 1000 )\r",
							"        });\r",
							"         break;\r",
							"\r",
							"    case 400:\r",
							"        pm.test(\"Bad Request-400\");\r",
							"        break;\r",
							"\r",
							"    case 401:\r",
							"        pm.test(\"Unable to identify employee\");\r",
							"        break;\r",
							"\r",
							"    case 404:\r",
							"        pm.test(\"Not Found-404\");\r",
							"        break;\r",
							"\r",
							"    case 500:\r",
							"        pm.test(\"Internal Server Error -500\");\r",
							"        break;\r",
							"    \r",
							"    case 503:\r",
							"        pm.test(\"Service Unavailable-503\");\r",
							"        break;\r",
							"}\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"var first_name=pm.variables.replaceIn(\"{{$randomFirstName}}\");\r",
							"pm.environment.set(\"first_name\",first_name);\r",
							"console.log(first_name);\r",
							"\r",
							"var middle_name =pm.variables.replaceIn(\"{{$randomFirstName}}\");\r",
							"pm.environment.set(\"middle_name\",middle_name);\r",
							"console.log(middle_name)\r",
							"\r",
							"var last_name = pm.variables.replaceIn(\"{{$randomLastName}}\")\r",
							"pm.environment.set(\"last_name\",last_name);\r",
							"console.log(last_name)\r",
							"\r",
							"// Generate a random year between 1950 and 2003\r",
							"let year = Math.floor(Math.random() * (2003 - 1950 + 1)) + 1950;\r",
							"\r",
							"// Generate a random month between 1 and 12\r",
							"let month = Math.floor(Math.random() * 12) + 1;\r",
							"month = month < 10 ? '0' + month : month; // Add leading 0 if necessary\r",
							"\r",
							"// Generate a random day based on the month and year\r",
							"let day;\r",
							"if (month == 2) {\r",
							"    // If it's February, check if it's a leap year\r",
							"    let isLeapYear = (year % 4 === 0 && year % 100 !== 0) || (year % 400 === 0);\r",
							"    day = Math.floor(Math.random() * (isLeapYear ? 29 : 28)) + 1;\r",
							"} else if ([4, 6, 9, 11].includes(parseInt(month))) {\r",
							"    // For April, June, September, November, limit days to 30\r",
							"    day = Math.floor(Math.random() * 30) + 1;\r",
							"} else {\r",
							"    // For all other months, limit days to 31\r",
							"    day = Math.floor(Math.random() * 31) + 1;\r",
							"}\r",
							"day = day < 10 ? '0' + day : day; // Add leading 0 if necessary\r",
							"\r",
							"// Combine year, month, and day into a date string (YYYY-MM-DD)\r",
							"let dob = `${year}-${month}-${day}`;\r",
							"\r",
							"// Set the DOB as a global or environment variable\r",
							"pm.environment.set(\"date_of_birth\", dob);\r",
							"\r",
							"console.log(\"Generated random DOB:\", dob);\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"id\":{{id}},\r\n  \"first_name\": \"{{first_name}}\",\r\n  \"middle_name\": \"{{middle_name}}\",\r\n  \"last_name\": \"{{last_name}}\",\r\n  \"date_of_birth\": \"{{date_of_birth}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/api/studentsDetails/{{id}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"studentsDetails",
						"{{id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Specific student",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var code =pm.response.code\r",
							"\r",
							"switch(code){\r",
							"    case 200:\r",
							"      var jsonData =pm.response.json()\r",
							"    pm.test(\"ID validation\",function(){\r",
							"        pm.expect(jsonData.data.id).to.eql(pm.environment.get(\"id\"))\r",
							"    })\r",
							"    pm.test(\"First Name Validation\",function() {\r",
							"    pm.expect(jsonData.data.first_name).to.eql(pm.environment.get(\"first_name\"))\r",
							"})\r",
							"pm.test(\"Middle Name Validation\",function(){\r",
							"    pm.expect(jsonData.data.middle_name).to.eql(pm.environment.get(\"middle_name\"))\r",
							"})\r",
							"pm.test(\"Last Name Validation\",function(){\r",
							"    pm.expect(jsonData.data.last_name).to.eql(pm.environment.get(\"last_name\"))\r",
							"})\r",
							"pm.test(\"Date of birth validation\",function(){\r",
							"    pm.expect(jsonData.data.date_of_birth).to.eql(pm.environment.get(\"date_of_birth\"))\r",
							"})\r",
							"\r",
							"       pm.test(\"Verify Response time is less than 10000ms\", function () {//Service Level Aggrement = SLA\r",
							"            pm.expect( pm.response.responseTime ).to.be.below( 1000 )\r",
							"        });\r",
							"         break;\r",
							"\r",
							"    case 400:\r",
							"        pm.test(\"Bad Request-400\");\r",
							"        break;\r",
							"\r",
							"    case 401:\r",
							"        pm.test(\"Unable to identify employee\");\r",
							"        break;\r",
							"\r",
							"    case 404:\r",
							"        pm.test(\"Not Found-404\");\r",
							"        break;\r",
							"\r",
							"    case 500:\r",
							"        pm.test(\"Internal Server Error -500\");\r",
							"        break;\r",
							"    \r",
							"    case 503:\r",
							"        pm.test(\"Service Unavailable-503\");\r",
							"        break;\r",
							"}\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/api/studentsDetails/{{id}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"studentsDetails",
						"{{id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create Technical Skills",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"var yearexp=pm.variables.replaceIn(\"{{$randomInt}}\")\r",
							"console.log(yearexp)\r",
							"pm.environment.set(\"yearexp\",yearexp);\r",
							"\r",
							"// Generate a random year between 1950 and 2003\r",
							"let year = Math.floor(Math.random() * (2003 - 1950 + 1)) + 1950;\r",
							"\r",
							"// Generate a random month between 1 and 12\r",
							"let month = Math.floor(Math.random() * 12) + 1;\r",
							"month = month < 10 ? '0' + month : month; // Add leading 0 if necessary\r",
							"\r",
							"// Generate a random day based on the month and year\r",
							"let day;\r",
							"if (month == 2) {\r",
							"    // If it's February, check if it's a leap year\r",
							"    let isLeapYear = (year % 4 === 0 && year % 100 !== 0) || (year % 400 === 0);\r",
							"    day = Math.floor(Math.random() * (isLeapYear ? 29 : 28)) + 1;\r",
							"} else if ([4, 6, 9, 11].includes(parseInt(month))) {\r",
							"    // For April, June, September, November, limit days to 30\r",
							"    day = Math.floor(Math.random() * 30) + 1;\r",
							"} else {\r",
							"    // For all other months, limit days to 31\r",
							"    day = Math.floor(Math.random() * 31) + 1;\r",
							"}\r",
							"day = day < 10 ? '0' + day : day; // Add leading 0 if necessary\r",
							"\r",
							"// Combine year, month, and day into a date string (YYYY-MM-DD)\r",
							"let dob = `${year}-${month}-${day}`;\r",
							"\r",
							"// Set the DOB as a global or environment variable\r",
							"pm.environment.set(\"lastused\", dob);\r",
							"\r",
							"console.log(\"Generated random DOB:\", dob);\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"var code=pm.response.code\r",
							"console.log(code)\r",
							"switch(code){\r",
							"        case 200:\r",
							"        var jsonData= pm.response.json()\r",
							"         pm.test(\"Successfully Create Technical Skills\", function(){\r",
							"            pm.expect(jsonData.msg).to.eql(\"Add  data success\")\r",
							"        })\r",
							"\r",
							"        pm.test(\"Verify Response time is less than 300ms\", function () {//Service Level Aggrement = SLA\r",
							"            pm.expect( pm.response.responseTime ).to.be.below( 300 )\r",
							"        });\r",
							"         break;\r",
							"\r",
							"    case 400:\r",
							"        pm.test(\"Bad Request-400\");\r",
							"        break;\r",
							"\r",
							"    case 401:\r",
							"        pm.test(\"Unable to identify employee\");\r",
							"        break;\r",
							"\r",
							"    case 404:\r",
							"        pm.test(\"Not Found-404\");\r",
							"        break;\r",
							"\r",
							"    case 500:\r",
							"        pm.test(\"Internal Server Error -500\");\r",
							"        break;\r",
							"    \r",
							"    case 503:\r",
							"        pm.test(\"Service Unavailable-503\");\r",
							"        break;\r",
							"}\r",
							"          "
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{ \r\n\"id\": 1, \r\n\"language\": [ \r\n\"Bangla\", \r\n\"English\" \r\n], \r\n\"yearexp\": \"{{yearexp}}\", \r\n\"lastused\": \"{{lastused}}\", \r\n\"st_id\": {{id}}\r\n} \r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/api/technicalskills",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"technicalskills"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create Student Address",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"var House_Number = pm.variables.replaceIn(\"{{$randomInt}}\")\r",
							"console.log(House_Number)\r",
							"pm.environment.set(\"House_Number\",House_Number);\r",
							"\r",
							"var City=pm.variables.replaceIn(\"{{$randomCity}}\") \r",
							"console.log(City)\r",
							"pm.environment.set(\"City\",City);\r",
							"\r",
							"var State= pm.variables.replaceIn(\"{{$randomCity}}\")\r",
							"console.log(State)\r",
							"pm.environment.set(\"State\",State);\r",
							"\r",
							"var Country =pm.variables.replaceIn(\"{{$randomCountry}}\")\r",
							"console.log(Country)\r",
							"pm.environment.set(\"Country\",Country)\r",
							"\r",
							"var Std_Code=pm.variables.replaceIn(\"{{$randomCity}}\")\r",
							"console.log(Std_Code)\r",
							"pm.environment.set(\"Std_Code\",Std_Code);\r",
							"\r",
							"var Home=pm.variables.replaceIn(\"{{$randomPhoneNumber}}\")\r",
							"console.log(Home)\r",
							"pm.environment.set(\"Home\",Home);\r",
							"\r",
							"var Mobile=pm.variables.replaceIn(\"{{$randomPhoneNumber}}\")\r",
							"console.log(Mobile)\r",
							"pm.environment.set(\"Mobile\",Mobile);\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"var code=pm.response.code\r",
							"console.log(code)\r",
							"switch(code){\r",
							"    case 200:\r",
							"    var jsonData=pm.response.json()\r",
							"    pm.test(\"Successfully Created\",function(){\r",
							"        pm.expect(jsonData.msg).to.eql(\"Add  data success\")\r",
							"    })\r",
							"    pm.test(\"Verify Response time is less than 300ms\",function(){\r",
							"        pm.expect(pm.response.responseTime).to.be.below(300)\r",
							"    })\r",
							"    break;\r",
							"    \r",
							"     case 400:\r",
							"        pm.test(\"Bad Request-400\");\r",
							"        break;\r",
							"\r",
							"    case 401:\r",
							"        pm.test(\"Unable to identify employee\");\r",
							"        break;\r",
							"\r",
							"    case 404:\r",
							"        pm.test(\"Not Found-404\");\r",
							"        break;\r",
							"\r",
							"    case 500:\r",
							"        pm.test(\"Internal Server Error -500\");\r",
							"        break;\r",
							"    \r",
							"    case 503:\r",
							"        pm.test(\"Service Unavailable-503\");\r",
							"        break;\r",
							"}"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"Permanent_Address\": {\r\n    \"House_Number\": \"{{House_Number}}\",\r\n    \"City\": \"{{City}}\",\r\n    \"State\": \"{{State}}\",\r\n    \"Country\": \"{{Country}}\",\r\n    \"PhoneNumber\": [\r\n      {\r\n        \"Std_Code\": \"{{Std_Code}}\",\r\n        \"Home\": \"{{Home}}\",\r\n        \"Mobile\": \"{{Mobile}}\"\r\n      },\r\n      {\r\n        \"Std_Code\": \"{{Std_Code}}\",\r\n        \"Home\": \"{{Home}}\",\r\n        \"Mobile\": \"{{Mobile}}\"\r\n      }\r\n    ]\r\n  },\r\n  \"Current_Address\": {\r\n    \"House_Number\":\"{{House_Number}}\",\r\n    \"City\": \"{{City}}\",\r\n    \"State\": \"{{State}}\",\r\n    \"Country\": \"{{Country}}\",\r\n    \"PhoneNumber\": [\r\n      {\r\n        \"Std_Code\":  \"{{Std_Code}}\",\r\n        \"Home\":  \"{{Home}}\",\r\n        \"Mobile\": \"{{Mobile}}\"\r\n      },\r\n      {\r\n        \"Std_Code\":\"{{Std_Code}}\",\r\n        \"Home\": \"{{Home}}\",\r\n        \"Mobile\": \"{{Mobile}}\"\r\n      }\r\n    ]\r\n  },\r\n  \"stId\": \"{{id}}\"\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/api/addresses",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"addresses"
					]
				}
			},
			"response": []
		},
		{
			"name": "FINAL STUDENT DETAILS",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var code =pm.response.code\r",
							"\r",
							"switch(code){\r",
							"    case 200:\r",
							"      var jsonData =pm.response.json()\r",
							"    pm.test(\"First Name Validation\",function() {\r",
							"    pm.expect(jsonData.data.first_name).to.eql(pm.environment.get(\"first_name\"))\r",
							"    })\r",
							"    pm.test(\"Middle Name Validation\",function(){\r",
							"    pm.expect(jsonData.data.middle_name).to.eql(pm.environment.get(\"middle_name\"))\r",
							"    })\r",
							"    pm.test(\"Last Name Validation\",function(){\r",
							"    pm.expect(jsonData.data.last_name).to.eql(pm.environment.get(\"last_name\"))\r",
							"    })\r",
							"    pm.test(\"Date of birth validation\",function(){\r",
							"    pm.expect(jsonData.data.date_of_birth).to.eql(pm.environment.get(\"date_of_birth\"))\r",
							"    })\r",
							"    pm.test(\"Language Validation\",function(){\r",
							"    pm.expect(jsonData.data.TechnicalDetails[0].language[0]).to.eql(\"Bangla\")\r",
							"    pm.expect(jsonData.data.TechnicalDetails[0].language[1]).to.eql(\"English\")\r",
							"    })\r",
							"    pm.test(\"Year of Exprience Validation\",function(){\r",
							"    pm.expect(jsonData.data.TechnicalDetails[0].yearexp).to.eql(pm.environment.get(\"yearexp\"))\r",
							"    })\r",
							"    pm.test(\"last Used Validation\",function(){\r",
							"        pm.expect(jsonData.data.TechnicalDetails[0].lastused).to.eql(pm.environment.get(\"lastused\"))\r",
							"    })\r",
							"    pm.test(\"Permanent Address Validation\",function(){\r",
							"        pm.expect(jsonData.data.Address[0].Permanent_Address.House_Number).to.eql(pm.environment.get(\"House_Number\"))\r",
							"    })\r",
							"    pm.test(\"City Validation\",function(){\r",
							"        pm.expect(jsonData.data.Address[0].Permanent_Address.City).to.eql(pm.environment.get(\"City\"))\r",
							"    })\r",
							"     pm.test(\"State Validation\",function(){\r",
							"        pm.expect(jsonData.data.Address[0].Permanent_Address.State).to.eql(pm.environment.get(\"State\"))\r",
							"    })\r",
							"     pm.test(\"Country Validation\",function(){\r",
							"        pm.expect(jsonData.data.Address[0].Permanent_Address.Country).to.eql(pm.environment.get(\"Country\"))\r",
							"    })\r",
							"    pm.test(\"Student code Validation\",function(){\r",
							"        pm.expect(jsonData.data.Address[0].Permanent_Address.PhoneNumber[0].Std_Code).to.eql(pm.environment.get(\"Std_Code\"))\r",
							"    }) \r",
							"     pm.test(\"Home Validation\",function(){\r",
							"        pm.expect(jsonData.data.Address[0].Permanent_Address.PhoneNumber[0].Home).to.eql(pm.environment.get(\"Home\"))\r",
							"    }) \r",
							"     pm.test(\"Mobile Validation\",function(){\r",
							"        pm.expect(jsonData.data.Address[0].Permanent_Address.PhoneNumber[0].Mobile).to.eql(pm.environment.get(\"Mobile\"))\r",
							"    }) \r",
							"    \r",
							"       pm.test(\"Verify Response time is less than 10000ms\", function () {//Service Level Aggrement = SLA\r",
							"            pm.expect( pm.response.responseTime ).to.be.below( 1000 )\r",
							"        });\r",
							"         break;\r",
							"\r",
							"    case 400:\r",
							"        pm.test(\"Bad Request-400\");\r",
							"        break;\r",
							"\r",
							"    case 401:\r",
							"        pm.test(\"Unable to identify employee\");\r",
							"        break;\r",
							"\r",
							"    case 404:\r",
							"        pm.test(\"Not Found-404\");\r",
							"        break;\r",
							"\r",
							"    case 500:\r",
							"        pm.test(\"Internal Server Error -500\");\r",
							"        break;\r",
							"    \r",
							"    case 503:\r",
							"        pm.test(\"Service Unavailable-503\");\r",
							"        break;\r",
							"}\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/api/FinalStudentDetails/{{id}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"FinalStudentDetails",
						"{{id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete Student",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var code =pm.response.code\r",
							"\r",
							"switch(code){\r",
							"    case 200:\r",
							"        var jsonData=pm.response.json()\r",
							"        pm.test(\"Successfully Deleted\",function(){\r",
							"            pm.expect(jsonData.msg).to.eql(\"Delete  data success\")\r",
							"        })\r",
							"        pm.test(\"Verify Response time is less than 500ms\", function () {//Service Level Aggrement = SLA\r",
							"            pm.expect( pm.response.responseTime ).to.be.below( 500 )\r",
							"        });\r",
							"         break;\r",
							"\r",
							"    case 400:\r",
							"        pm.test(\"Bad Request-400\");\r",
							"        break;\r",
							"\r",
							"    case 401:\r",
							"        pm.test(\"Unable to identify employee\");\r",
							"        break;\r",
							"\r",
							"    case 404:\r",
							"        pm.test(\"Not Found-404\");\r",
							"        break;\r",
							"\r",
							"    case 500:\r",
							"        pm.test(\"Internal Server Error -500\");\r",
							"        break;\r",
							"    \r",
							"    case 503:\r",
							"        pm.test(\"Service Unavailable-503\");\r",
							"        break;\r",
							"}"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{base_url}}/api/studentsDetails/{{id}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"studentsDetails",
						"{{id}}"
					]
				}
			},
			"response": []
		}
	]
}